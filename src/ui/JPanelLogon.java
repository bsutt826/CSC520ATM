package ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.util.Arrays;
import java.awt.Toolkit;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import javax.swing.text.PlainDocument;

import main.Main;
import model.Machine;
import model.Person;
import model.PersonType;

public class JPanelLogon extends JPanel implements ActionListener 
{
	// A unique ID required because this class is serializable
	// This can be auto generated by hovering over the warning on the class name
	private static final long serialVersionUID = -5345312337378505116L;
	
	private final String ACTION_ENTER = "ENTER";
	private final String ACTION_CANCEL = "CANCEL";

	JFrameATM atmFrame;
	
	JLabel lblEnterCredentials;
	JLabel lblMessage;
	JLabel lblIdentification;
	JTextField txbIdentification;
	JLabel lblPin;
	JPasswordField pwdPin;
	//JButton btnCancel;
	//JButton btnEnter;
	JLabel lblCancel;
	
	KeyEventDispatcher keyEventDispatcher = null;
	
	/**
	 * Constructor for the Logon panel
	 * 
	 * @param appFrame Parent frame that will hold the panels created by actions performed by this class
	 */
	public JPanelLogon(JFrameATM atmFrame) {
		
		// Save the application frame
		this.atmFrame = atmFrame;
		
		// Reset the frame's button action listeners
		atmFrame.setButtonActionDefaults();

		// Set the panel size to match the global parameters
		this.setSize(Main.ATM_PANEL_WIDTH, Main.ATM_PANEL_HEIGHT);
		
		// Set frame background color
		this.setBackground(Main.ATM_CONTENT_PANEL_BACKGROUND);

        // Number of rows and heights
		int panelRows = 7;
        int[] rows = new int[panelRows];
        Arrays.fill(rows, (Main.ATM_PANEL_HEIGHT / panelRows));
		
		// Number of columns and widths
        int panelColumns = 2;
        int[] columns = new int[panelColumns];
        Arrays.fill(columns, (Main.ATM_PANEL_WIDTH / panelColumns));
		
		// Set layout
		GridBagLayout gridBagLayout = new GridBagLayout();
        gridBagLayout.rowHeights = rows;
        gridBagLayout.columnWidths = columns;
		this.setLayout(gridBagLayout);
		
		// Set initial constraints
		GridBagConstraints constraints = new GridBagConstraints();
		constraints.insets = new Insets(0,0,0,0);
		
		// Create and add components for this panel
		
		lblEnterCredentials = new JLabel("Enter Credentials and Press Enter. ");
		lblEnterCredentials.setFont(new Font("Tahoma", Font.BOLD, 22));
		constraints.gridx = 0;
		constraints.gridy = 1;
		constraints.gridwidth = 2;
		constraints.gridheight = 1;
		constraints.insets = new Insets(0,0,0,0);  //top, left, bottom, right padding
		constraints.anchor = GridBagConstraints.CENTER;
		this.add(lblEnterCredentials, constraints);
		
		lblMessage = new JLabel(" ");
		lblMessage.setFont(new Font("Tahoma", Font.BOLD, 20));
		lblMessage.setForeground(Color.RED);
		constraints.gridx = 0;
		constraints.gridy = 2;
		constraints.gridwidth = 2;
		constraints.gridheight = 1;
		constraints.insets = new Insets(0,0,0,0);  //top, left, bottom, right padding
		constraints.anchor = GridBagConstraints.CENTER;
		this.add(lblMessage, constraints);
		
		lblIdentification = new JLabel("Identification:");
		lblIdentification.setFont(new Font("Tahoma", Font.BOLD, 22));
		constraints.gridx = 0;
		constraints.gridy = 3;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.insets = new Insets(0,0,0,0);  //top, left, bottom, right padding
		constraints.anchor = GridBagConstraints.EAST;
		this.add(lblIdentification, constraints);
		
		txbIdentification = new JTextField("");
		txbIdentification.setFont(new Font("Tahoma", Font.PLAIN, 22));
		txbIdentification.setColumns(10);
		constraints.gridx = 1;
		constraints.gridy = 3;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.insets = new Insets(0,10,0,0);  //top, left, bottom, right padding
		constraints.anchor = GridBagConstraints.WEST;
		//txbIdentification.setMinimumSize(new Dimension(70,40));
		this.add(txbIdentification, constraints);
		
		lblPin = new JLabel("Pin:");
		lblPin.setFont(new Font("Tahoma", Font.BOLD, 22));
		constraints.gridx = 0;
		constraints.gridy = 4;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.insets = new Insets(0,0,0,0);  //top, left, bottom, right padding
		constraints.anchor = GridBagConstraints.EAST;
		this.add(lblPin, constraints); //, BorderLayout.CENTER);
		
		int pinMax = 4;
		pwdPin = new JPasswordField(pinMax);
		pwdPin.setFont(new Font("Tahoma", Font.PLAIN, 22));
        PlainDocument document = (PlainDocument) pwdPin.getDocument();
        document.setDocumentFilter(new DocumentFilter() {
            @Override
            public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                String string = fb.getDocument().getText(0, fb.getDocument().getLength()) + text;
                if (string.length() <= pinMax) {
                    super.replace(fb, offset, length, text, attrs); //To change body of generated methods, choose Tools | Templates.
                }
                else {
                	Toolkit.getDefaultToolkit().beep();
                }
            }
        });
		pwdPin.setEchoChar('*');
		constraints.gridx = 1;
		constraints.gridy = 4;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.insets = new Insets(0,10,0,0);  //top, left, bottom, right padding
		constraints.anchor = GridBagConstraints.WEST;
		//pwdPin.setMinimumSize(new Dimension(38,40));
		this.add(pwdPin, constraints);
		
		int labelWidth = 185;
		int labelHeight = 40;
		
		lblCancel = new JLabel("Cancel ", JLabel.RIGHT);
		lblCancel.setFont(new Font("Tahoma", Font.BOLD, 22));
		atmFrame.setActionListener_Right4(ACTION_CANCEL, this);
		constraints.gridx = 1;
		constraints.gridy = 6;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.insets = new Insets(0,0,0,10);  //top, left, bottom, right padding
		constraints.anchor = GridBagConstraints.EAST;
		lblCancel.setOpaque(true);
		lblCancel.setBackground(Color.BLACK);
		lblCancel.setForeground(Color.WHITE);
		//lblCancel.setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.BLUE));
		lblCancel.setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, new Color(0x007FFF)));
		//lblDone.setBorder(new BevelBorder(BevelBorder.RAISED));
		lblCancel.setMinimumSize(new Dimension(labelWidth, labelHeight)); // Width, Height
		lblCancel.setPreferredSize(new Dimension(labelWidth, labelHeight));
		lblCancel.setMaximumSize(new Dimension(labelWidth, labelHeight));
		this.add(lblCancel, constraints);
		
		// Set initial component focus
		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				boolean focused = txbIdentification.requestFocusInWindow();
				if (Main.DEBUG)
			    	System.err.println(this.getClass().getTypeName() + "."
					         + (new Throwable().getStackTrace()[0].getMethodName())
					         + ": focused: >" + focused + "<"
					          );
			}
		});
		
		// Setup a KeyListener
		// This code works on a panel.  
		// The issue is that the mouse pointer can be over any number of components 
		// on the panel so you would need to setup a listener on every component.
		// This code will intercept the KeyEvent before any of the other components do.
		// Setting the return to "true" tells the KeyboardFocusManager should take 
		// no further action with regard to the KeyEvent 
		keyEventDispatcher = new KeyEventDispatcher() 
		                     {
		 				        @Override
		 				        public boolean dispatchKeyEvent(KeyEvent ke) {
		 				        	boolean handled = false;
		 				            switch (ke.getID()) {
		 				            /*
		 			                case KeyEvent.KEY_TYPED:
		 			    				if (Main.DEBUG)
			 						    	System.err.println(this.getClass().getTypeName() + "."
			 								         + (new Throwable().getStackTrace()[0].getMethodName())
			 								         + "KED: Key press code: " + ke.getKeyCode()
			 								        + ", char: " + ke.getKeyChar()
			 								          );
		 			                    break;
		 			                */
		 			                case KeyEvent.KEY_PRESSED:
		 			    				if (Main.DEBUG)
			 						    	System.err.println(this.getClass().getTypeName() + "."
			 								         + (new Throwable().getStackTrace()[0].getMethodName())
			 								         + "KED: Key press code: " + ke.getKeyCode()
			 								        + ", char: " + ke.getKeyChar()
			 								          );
		 			                    if (ke.getKeyCode() == KeyEvent.VK_ENTER)
		 			                    {
		 			                    	handled = true;
		 			        				ActionEvent actionEvent = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ACTION_ENTER);
		 			        				actionPerformed(actionEvent);
		 			                    }
		 			                    else if (ke.getKeyCode() == KeyEvent.VK_ESCAPE)
		 			                    {
		 			                    	handled = true;
		 			        				ActionEvent actionEvent = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ACTION_CANCEL);
		 			        				actionPerformed(actionEvent);
		 			                    }
		 			    				break;
		 			                /*
		 			                case KeyEvent.KEY_RELEASED:
		 			    				if (Main.DEBUG)
			 						    	System.err.println(this.getClass().getTypeName() + "."
			 								         + (new Throwable().getStackTrace()[0].getMethodName())
			 								         + "KED: Key press code: " + ke.getKeyCode()
			 								        + ", char: " + ke.getKeyChar()
			 								          );
		 			                    break;
		 			                */
		 			                default:
			 			       	    	// No action here
		 			                	// We're just not interested in this key.
		 			                    break;
		 				            }
		 				            return handled;
		 				        }
		 				    };
		KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(keyEventDispatcher);
		
		// All done
		return;
	}
	
	public void showPanel() {
		
		// Set this panel as the frame's content panel and update the frame title
		atmFrame.setContentPanel(this);
		atmFrame.setTitle(Main.ATM_FRAME_TITLE + " - (" + this.getClass().getSimpleName() + ")");
		
		// Initialize some stuff
		atmFrame.setSourceAccountNumber(0);
		atmFrame.setTargetAccountNumber(0);
		atmFrame.setTransactionType(null);
		atmFrame.setTransactionAmount(new BigDecimal(0));
		atmFrame.setAccount(null);
		
		// Re-paint and re-validate to display the panel
		atmFrame.repaint();
		atmFrame.revalidate();

		// All done
		return;
	}
	
	/**
	 * Handles the actions that are requested by this panel
	 * 
	 * @param actionEvent An ActionEvent containing the details of the event
	 */
	@Override
	public void actionPerformed(ActionEvent actionEvent){
		boolean error = false;
		
		String action = actionEvent.getActionCommand();
		
		if(Main.DEBUG)
	    	System.err.println(this.getClass().getTypeName() + "."
			         + (new Throwable().getStackTrace()[0].getMethodName())
			         + ": Got action: : " + action
			          );
		
		switch (action) {
		
			case ACTION_ENTER:
				// Reset the message
				lblMessage.setText(" ");
		        error = false;
		
				// Lookup identification to determine if they are a customer of technician
		        
				// Here we will just assume:
		        //		1=Customer
		        //		2=Technician 
		        //		and anything else is an error
		        
		        // Validate the identification
				int identification = -1;
		        if(!error)
		        {
					try {
						identification = Integer.parseInt(txbIdentification.getText());			
					}
					catch (Exception ex) {
						error = true;
					}
					if (identification < 0) {
						error = true;
					}
					if(error)
					{
						lblMessage.setText("Identification must be numeric.");
						txbIdentification.requestFocusInWindow();
						txbIdentification.selectAll();
					}
		        }
				
		        // Validate the pin
				int pin = -1;
				char[] pinChars;
				if(!error)
				{
					try {
					    pinChars = pwdPin.getPassword();
					    if (pinChars.length == 4) {
					    	try {
					    		pin = Integer.parseInt(new String(pinChars));
					    	}
							catch (Exception ex) {
								error = true;
							}
					    } else {
					    	error = true;  // Pin must be exactly 4 characters
					    }
					}
					catch (Exception ex) {
						error = true;
					}
					if (pin < 0) {
						error = true;
					}
					if(error)
					{
						lblMessage.setText("Invalid pin.");
						pwdPin.requestFocusInWindow();
						pwdPin.selectAll();
					}
				}
				
				// Display specific panel based on account
				if(!error)
		        {
					// Get the Person from the database
					Person person = null;
					person = Person.getPerson(identification);
					atmFrame.setPerson(person);
					
					if (person != null)
					{
						// Validate the pin
						if (!person.isPinValid(pin))
						{
							lblMessage.setText("Invalid pin");
							pwdPin.setText("");
							pwdPin.requestFocusInWindow();
						}
						else
						{
							// Get the Machine instance
							atmFrame.setMachine(Machine.getInstance());
							
							// Select next screen based on the person type
							PersonType personType =  person.getPersonType();
							switch (personType)
							{
								case Customer:
								{
									// Remove the Keyboard manager as we are leaving this panel
					             	KeyboardFocusManager.getCurrentKeyboardFocusManager().removeKeyEventDispatcher(keyEventDispatcher);
									// Create the customer panel and place it on the frame
									JPanelCustomer panelCustomer = new JPanelCustomer(atmFrame);
									panelCustomer.showPanel();
									
									break;
								}
								
								case Technician:
								{
									// Remove the Keyboard manager as we are leaving this panel
					             	KeyboardFocusManager.getCurrentKeyboardFocusManager().removeKeyEventDispatcher(keyEventDispatcher);
									// Create the technician panel and place it on the frame
									JPanelTechnician panelTechnician = new JPanelTechnician(atmFrame);
									panelTechnician.showPanel();
		
									break;
								}
								
								default:
								{
									error = true;
							    	System.err.println(this.getClass().getTypeName() + "."
									         + (new Throwable().getStackTrace()[0].getMethodName())
									         + ": ERROR: Invalid PersonType: >" + personType + "<"
									          );
		
									break;
								}
							}
						}
					}
					else
					{
						lblMessage.setText("Invalid identification");
						txbIdentification.requestFocusInWindow();
						txbIdentification.selectAll();
					}
		        }
				
				break;
				
			case ACTION_CANCEL:
				// Remove the Keyboard manager as we are leaving this panel
             	KeyboardFocusManager.getCurrentKeyboardFocusManager().removeKeyEventDispatcher(keyEventDispatcher);
				// Create the welcome panel and place it on the frame
				JPanelWelcome panelWelcome = new JPanelWelcome(atmFrame);
				panelWelcome.showPanel();
				
				break;
		}
	    
		return;
	}
}
