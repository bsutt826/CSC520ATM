package ui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Properties;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.BevelBorder;

import main.Main;
import model.Person;
import model.Machine;
import model.Account;

import db.DBEngine;
import db.DataAccess;

public class JFrameATM extends JFrame //implements ActionListener
{
	// A unique ID required because this class is serializable
	// This can be auto generated by hovering over the warning on the class name
	private static final long serialVersionUID = 1623842826030182898L;

	// These variables constitute the "state" of the ATM at any point in time
	private Machine machine = null;
	private Person person = null;
	private Account account = null;
	private Account[] accounts = null;
	private String transactionType = null;
	private int sourceAccountNumber = 0;
	private int targetAccountNumber = 0;
	private BigDecimal transactionAmount = null; 
	
	// Data access component
	public DataAccess dataAccess = null;
	
	// Frame buttons actions
	private final String ACTION_LEFT1 = "LEFT1";
	private final String ACTION_RIGHT1 = "RIGHT1";
	private final String ACTION_LEFT2 = "LEFT2";
	private final String ACTION_RIGHT2 = "RIGHT2";
	private final String ACTION_LEFT3 = "LEFT3";
	private final String ACTION_RIGHT3 = "RIGHT3";
	private final String ACTION_LEFT4 = "LEFT4";
	private final String ACTION_RIGHT4 = "RIGHT4";
	
	// Frame visual components
	private JPanel pnlContent;
	private JButton btnLeft1;
	private JButton btnRight1;
	private JButton btnLeft2;
	private JButton btnRight2;
	private JButton btnLeft3;
	private JButton btnRight3;
	private JButton btnLeft4;
	private JButton btnRight4;
	
	public JFrameATM()
	{	
		// Create a database connection
		dataAccess = DataAccessSetup();
		
		// Set frame background color
		this.getContentPane().setBackground(Main.ATM_FRAME_BACKGROUND);
		
		// Set a 3-D effect on the border
		//this.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.DARK_GRAY));
		this.getRootPane().setBorder(new BevelBorder(BevelBorder.RAISED));

        // Number of rows and heights
        int[] rows = new int[Main.ATM_HEIGHT_CELLS];
        Arrays.fill(rows, Main.ATM_CELL_HEIGHT);
		
		// Number of columns and widths
        int[] columns = new int[Main.ATM_WIDTH_CELLS];
        Arrays.fill(columns, Main.ATM_CELL_WIDTH);
		
		// Set layout
		GridBagLayout gridBagLayout = new GridBagLayout();
        gridBagLayout.rowHeights = rows;
        gridBagLayout.columnWidths = columns;
		this.setLayout(gridBagLayout);
		
		// Set initial constraints
		GridBagConstraints constraints = new GridBagConstraints();
		constraints.insets = new Insets(0,0,0,0);
		
		// Create and add components for this frame
		
		pnlContent = new JPanel();
		pnlContent.setVisible(true);
		constraints.gridx = 1;
		constraints.gridy = 1;
		constraints.gridwidth = 6;
		constraints.gridheight = 7;
		constraints.anchor = GridBagConstraints.CENTER;
		constraints.fill = GridBagConstraints.BOTH;
		this.add(pnlContent, constraints);
		
		
		btnLeft1 = new JButton("");
		//btnLeft1.setFont(new Font("Tahoma", Font.BOLD, 22));
		btnLeft1.setVisible(true);
		btnLeft1.setActionCommand(ACTION_LEFT1);
		//btnLeft1.addActionListener(this);
		constraints.gridx = 0;
		constraints.gridy = 4;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.anchor = GridBagConstraints.CENTER;
		constraints.fill = GridBagConstraints.NONE;
		//btnLeft1.setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.DARK_GRAY));
		btnLeft1.setBorder(new BevelBorder(BevelBorder.RAISED));
		btnLeft1.setMinimumSize(new Dimension(50,50));
		this.add(btnLeft1, constraints);
		
		btnRight1 = new JButton("");
		//btnRight1.setFont(new Font("Tahoma", Font.BOLD, 22));
		btnRight1.setVisible(true);
		btnRight1.setActionCommand(ACTION_RIGHT1);
		//btnRight1.addActionListener(this);
		constraints.gridx = 7;
		constraints.gridy = 4;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.anchor = GridBagConstraints.CENTER;
		constraints.fill = GridBagConstraints.NONE;
		//btnLeft1.setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.DARK_GRAY));
		btnRight1.setBorder(new BevelBorder(BevelBorder.RAISED));
		btnRight1.setMinimumSize(new Dimension(50,50));
		this.add(btnRight1, constraints);
		
		btnLeft2 = new JButton("");
		//btnLeft2.setFont(new Font("Tahoma", Font.BOLD, 22));
		btnLeft2.setVisible(true);
		btnLeft2.setActionCommand(ACTION_LEFT2);
		//btnLeft2.addActionListener(this);
		constraints.gridx = 0;
		constraints.gridy = 5;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.anchor = GridBagConstraints.CENTER;
		constraints.fill = GridBagConstraints.NONE;
		//btnLeft2.setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.DARK_GRAY));
		btnLeft2.setBorder(new BevelBorder(BevelBorder.RAISED));
		btnLeft2.setMinimumSize(new Dimension(50,50));
		this.add(btnLeft2, constraints);
		
		btnRight2 = new JButton("");
		//btnRight2.setFont(new Font("Tahoma", Font.BOLD, 22));
		btnRight2.setVisible(true);
		btnRight2.setActionCommand(ACTION_RIGHT2);
		//btnRight2.addActionListener(this);
		constraints.gridx = 7;
		constraints.gridy = 5;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.anchor = GridBagConstraints.CENTER;
		constraints.fill = GridBagConstraints.NONE;
		//btnRight2.setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.DARK_GRAY));
		btnRight2.setBorder(new BevelBorder(BevelBorder.RAISED));
		btnRight2.setMinimumSize(new Dimension(50,50));
		this.add(btnRight2, constraints);
		
		btnLeft3 = new JButton("");
		//btnLeft3.setFont(new Font("Tahoma", Font.BOLD, 22));
		btnLeft3.setVisible(true);
		btnLeft3.setActionCommand(ACTION_LEFT3);
		//btnLeft3.addActionListener(this);
		constraints.gridx = 0;
		constraints.gridy = 6;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.anchor = GridBagConstraints.CENTER;
		constraints.fill = GridBagConstraints.NONE;
		//btnLeft3.setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.DARK_GRAY));
		btnLeft3.setBorder(new BevelBorder(BevelBorder.RAISED));
		btnLeft3.setMinimumSize(new Dimension(50,50));
		this.add(btnLeft3, constraints);
		
		btnRight3 = new JButton("");
		//btnRight3.setFont(new Font("Tahoma", Font.BOLD, 22));
		btnRight3.setVisible(true);
		btnRight3.setActionCommand(ACTION_RIGHT3);
		//btnRight3.addActionListener(this);
		constraints.gridx = 7;
		constraints.gridy = 6;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.anchor = GridBagConstraints.CENTER;
		constraints.fill = GridBagConstraints.NONE;
		//btnRight3.setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.DARK_GRAY));
		btnRight3.setBorder(new BevelBorder(BevelBorder.RAISED));
		btnRight3.setMinimumSize(new Dimension(50,50));
		this.add(btnRight3, constraints);
		
		btnLeft4 = new JButton("");
		//btnLeft4.setFont(new Font("Tahoma", Font.BOLD, 22));
		btnLeft4.setVisible(true);
		btnLeft4.setActionCommand(ACTION_LEFT4);
		//btnLeft4.addActionListener(this);
		constraints.gridx = 0;
		constraints.gridy = 7;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.anchor = GridBagConstraints.CENTER;
		constraints.fill = GridBagConstraints.NONE;
		//btnLeft4.setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.DARK_GRAY));
		btnLeft4.setBorder(new BevelBorder(BevelBorder.RAISED));
		btnLeft4.setMinimumSize(new Dimension(50,50));
		this.add(btnLeft4, constraints);
		
		btnRight4 = new JButton("");
		//btnRight4.setFont(new Font("Tahoma", Font.BOLD, 22));
		btnRight4.setVisible(true);
		btnRight4.setActionCommand(ACTION_RIGHT4);
		//btnRight4.addActionListener(this);
		constraints.gridx = 7;
		constraints.gridy = 7;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.anchor = GridBagConstraints.CENTER;
		constraints.fill = GridBagConstraints.NONE;
		//btnRight4.setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.DARK_GRAY));
		btnRight4.setBorder(new BevelBorder(BevelBorder.RAISED));
		btnRight4.setMinimumSize(new Dimension(50,50));
		this.add(btnRight4, constraints);

		// All Done
		return;
	}
	
	public void setButtonActionDefaults()
	{
		ActionListener[] oldActionListeners = null;
		
		btnLeft1.setActionCommand(ACTION_LEFT1);
		// Remove all other action listeners attached to this button
		oldActionListeners = btnLeft1.getActionListeners();
		for (ActionListener oldActionListener : oldActionListeners)
		{
			btnLeft1.removeActionListener(oldActionListener);
		}
		
		btnLeft2.setActionCommand(ACTION_LEFT2);
		// Remove all other action listeners attached to this button
		oldActionListeners = btnLeft2.getActionListeners();
		for (ActionListener oldActionListener : oldActionListeners)
		{
			btnLeft2.removeActionListener(oldActionListener);
		}
		
		btnLeft3.setActionCommand(ACTION_LEFT3);
		// Remove all other action listeners attached to this button
		oldActionListeners = btnLeft3.getActionListeners();
		for (ActionListener oldActionListener : oldActionListeners)
		{
			btnLeft3.removeActionListener(oldActionListener);
		}
		
		btnLeft4.setActionCommand(ACTION_LEFT4);
		// Remove all other action listeners attached to this button
		oldActionListeners = btnLeft4.getActionListeners();
		for (ActionListener oldActionListener : oldActionListeners)
		{
			btnLeft4.removeActionListener(oldActionListener);
		}
		
		btnRight1.setActionCommand(ACTION_RIGHT1);
		// Remove all other action listeners attached to this button
		oldActionListeners = btnRight1.getActionListeners();
		for (ActionListener oldActionListener : oldActionListeners)
		{
			btnRight1.removeActionListener(oldActionListener);
		}
		
		btnRight2.setActionCommand(ACTION_RIGHT2);
		// Remove all other action listeners attached to this button
		oldActionListeners = btnRight2.getActionListeners();
		for (ActionListener oldActionListener : oldActionListeners)
		{
			btnRight2.removeActionListener(oldActionListener);
		}
		
		btnRight3.setActionCommand(ACTION_RIGHT3);
		// Remove all other action listeners attached to this button
		oldActionListeners = btnRight3.getActionListeners();
		for (ActionListener oldActionListener : oldActionListeners)
		{
			btnRight3.removeActionListener(oldActionListener);
		}
		
		btnRight4.setActionCommand(ACTION_RIGHT4);
		// Remove all other action listeners attached to this button
		oldActionListeners = btnRight4.getActionListeners();
		for (ActionListener oldActionListener : oldActionListeners)
		{
			btnRight4.removeActionListener(oldActionListener);
		}
		
		// All done
		return;
	}
	
	public void setActionListener_Left1(String newActionCommand, ActionListener newActionListener)
	{
		// Remove all other action listeners attached to this button
		ActionListener[] oldActionListeners = btnLeft1.getActionListeners();
		for (ActionListener oldActionListener : oldActionListeners)
		{
			btnLeft1.removeActionListener(oldActionListener);
		}
		
		btnLeft1.setActionCommand(newActionCommand);
		btnLeft1.addActionListener(newActionListener);
		
		// All done
		return;
	}
	
	public void setActionListener_Left2(String newActionCommand, ActionListener newActionListener)
	{
		// Remove all other action listeners attached to this button
		ActionListener[] oldActionListeners = btnLeft2.getActionListeners();
		for (ActionListener oldActionListener : oldActionListeners)
		{
			btnLeft2.removeActionListener(oldActionListener);
		}
		
		btnLeft2.setActionCommand(newActionCommand);
		btnLeft2.addActionListener(newActionListener);
		
		// All done
		return;
	}
	
	public void setActionListener_Left3(String newActionCommand, ActionListener newActionListener)
	{
		// Remove all other action listeners attached to this button
		ActionListener[] oldActionListeners = btnLeft3.getActionListeners();
		for (ActionListener oldActionListener : oldActionListeners)
		{
			btnLeft3.removeActionListener(oldActionListener);
		}
		
		btnLeft3.setActionCommand(newActionCommand);
		btnLeft3.addActionListener(newActionListener);
		
		// All done
		return;
	}
	
	public void setActionListener_Left4(String newActionCommand, ActionListener newActionListener)
	{
		// Remove all other action listeners attached to this button
		ActionListener[] oldActionListeners = btnLeft4.getActionListeners();
		for (ActionListener oldActionListener : oldActionListeners)
		{
			btnLeft4.removeActionListener(oldActionListener);
		}
		
		btnLeft4.setActionCommand(newActionCommand);
		btnLeft4.addActionListener(newActionListener);
		
		// All done
		return;
	}
	
	public void setActionListener_Right1(String newActionCommand, ActionListener newActionListener)
	{
		// Remove all other action listeners attached to this button
		ActionListener[] oldActionListeners = btnRight1.getActionListeners();
		for (ActionListener oldActionListener : oldActionListeners)
		{
			btnRight1.removeActionListener(oldActionListener);
		}
		
		btnRight1.setActionCommand(newActionCommand);
		btnRight1.addActionListener(newActionListener);
		
		// All done
		return;
	}
	
	public void setActionListener_Right2(String newActionCommand, ActionListener newActionListener)
	{
		// Remove all other action listeners attached to this button
		ActionListener[] oldActionListeners = btnRight2.getActionListeners();
		for (ActionListener oldActionListener : oldActionListeners)
		{
			btnRight2.removeActionListener(oldActionListener);
		}
		
		btnRight2.setActionCommand(newActionCommand);
		btnRight2.addActionListener(newActionListener);
		
		// All done
		return;
	}
	
	public void setActionListener_Right3(String newActionCommand, ActionListener newActionListener)
	{
		// Remove all other action listeners attached to this button
		ActionListener[] oldActionListeners = btnRight3.getActionListeners();
		for (ActionListener oldActionListener : oldActionListeners)
		{
			btnRight3.removeActionListener(oldActionListener);
		}
		
		btnRight3.setActionCommand(newActionCommand);
		btnRight3.addActionListener(newActionListener);
		
		// All done
		return;
	}
	
	public void setActionListener_Right4(String newActionCommand, ActionListener newActionListener)
	{
		// Remove all other action listeners attached to this button
		ActionListener[] oldActionListeners = btnRight4.getActionListeners();
		for (ActionListener oldActionListener : oldActionListeners)
		{
			btnRight4.removeActionListener(oldActionListener);
		}
		
		btnRight4.setActionCommand(newActionCommand);
		btnRight4.addActionListener(newActionListener);
		
		// All done
		return;
	}
	
	
	/*
	 * This is not needed because the JFrame no longer implements ActionListener
	 * The buttons on this frame have their action listener set in the individual
	 * panels that are hosted inside of this frame.
	 * 
	 * This is done by calling the methods in this class named: setActionListener_?????(...)
	*/
	
	/**
	 * Handles the actions that are requested by this panel
	 * 
	 * @param actionEvent An ActionEvent containing the details of the event
	 */
	/*
	@Override
	public void actionPerformed(ActionEvent actionEvent) {

		String action = actionEvent.getActionCommand();
		String object = actionEvent.getSource().getClass().getName();
		
		if(Main.DEBUG)
	    	System.err.println(this.getClass().getTypeName() + "."
			         + (new Throwable().getStackTrace()[0].getMethodName())
			         + ": Got action: : " + action
			          );
		
		switch (action) {
		
		case "":
			// OK - No action defined for this event
			
			break;
			
			case "CANCEL":
				// Create the logon panel and place it on the frame
				//JPanelLogon panelLogon = new JPanelLogon(atmFrame);
				//panelLogon.showPanel();
				
				break;
			
		default:
			// Error no action implement for this action
	    	System.err.println(this.getClass().getTypeName() + "."
			         + (new Throwable().getStackTrace()[0].getMethodName())
			         + ": ERROR: No action defined for action: >" + action + "<"
			          );
			
			break;
		}
		
		// All done
		return;
	}
	*/
	
	public void setContentPanel(JPanel panelContent) {
		
		this.remove(pnlContent);
		
		GridBagConstraints constraints = new GridBagConstraints();
		constraints.insets = new Insets(0,0,0,0);
		pnlContent = panelContent; //new JPanel();
		pnlContent.setVisible(true);
		pnlContent.setBorder(new BevelBorder(BevelBorder.LOWERED)); //, Color.red, Color.blue));
		constraints.gridx = 1;
		constraints.gridy = 1;
		constraints.gridwidth = 6;
		constraints.gridheight = 7;
		constraints.fill = GridBagConstraints.BOTH;
		constraints.anchor = GridBagConstraints.CENTER;
		this.add(pnlContent, constraints);
		
		return;
	}
	
	public JPanel getContentPanel() {
		return pnlContent;
	}
	
	
	public void setPerson(Person person) {
		this.person = person;
		
		return;
	}
	
	public Person getPerson() {
		return person;
	}
	
	
	public void setMachine(Machine machine) {
		this.machine = machine;
		
		return;
	}
	
	public Machine getMachine() {
		return machine;
	}
	
	
	public void setAccount(Account account) {
		this.account = account;
		
		return;
	}
	
	public Account getAccount() {
		return account;
	}
	
	
	public void setAccounts(Account[] accounts) {
		this.accounts = accounts;
		
		return;
	}
	
	public Account[] getAccounts() {
		return accounts;
	}
	
	public void setTransactionType(String transactionType) {
		this.transactionType = transactionType;
		
		return;
	}
	
	public String getTransactionType() {
		return transactionType;
	}
	
	public void setSourceAccountNumber(int sourceAccountNumber) {
		this.sourceAccountNumber = sourceAccountNumber;
		
		return;
	}
	
	public int getSourceAccountNumber() {
		return sourceAccountNumber;
	}
	
	public void setTargetAccountNumber(int targetAccountNumber) {
		this.targetAccountNumber = targetAccountNumber;
		
		return;
	}
	
	public int getTargetAccountNumber() {
		return targetAccountNumber;
	}
	
	public BigDecimal getTransactionAmount() {
		return transactionAmount;
	}
	
	public void setTransactionAmount(BigDecimal transactionAmount) {
		this.transactionAmount = transactionAmount;
		
		return;
	}
	
	/**
	 * 
	 * @param args The arguments passed to the program by the operating system
	 * @throws Exception 
	 */
	private DataAccess DataAccessSetup()
	{
		// Get the database conncetion properties:
		//	url - Connection string
		//	user - User ID
		//	password - Password
        Properties properties = new Properties();
        // This will look for the file "application.properties" to be in the "/src" directory
        InputStream inputStream = Main.class.getClassLoader().getResourceAsStream("application.properties");
        try
        {
        	properties.load(inputStream);
        }
        catch (IOException ioEx)
        {
	    	System.err.println(this.getClass().getTypeName() + "."
			         + (new Throwable().getStackTrace()[0].getMethodName())
			         + ": ERROR: IOException: \n" 
			         + ioEx.getMessage()
			          );
        }

		// Create a database connection
		dataAccess = new DataAccess(DBEngine.AzureSQLServer, properties);
		dataAccess.connect();

		// All done
		return dataAccess;
	}
	
}
